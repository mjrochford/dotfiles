" reset autocmd's useful for :so $MYVIMRC
autocmd!

source ~/.config/vim/autoload/*
call plug#begin('~/.config/vim/plugged')
Plug 'jaredgorski/spacecamp'
Plug 'sheerun/vim-polyglot'

Plug 'igankevich/mesonic'
Plug 'ludovicchabant/vim-gutentags'
Plug 'preservim/tagbar'

Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'

Plug 'alvan/vim-closetag'

Plug 'junegunn/fzf', { 'dir': '~/.config/vim/fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'itchyny/lightline.vim'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'jackguo380/vim-lsp-cxx-highlight', {'for': ['c', 'cpp']}

if executable("go")
    Plug 'RRethy/vim-hexokinase', {'do': 'make hexokinase'}
endif

if executable("npm")
    Plug 'fannheyward/coc-rust-analyzer', {'do': 'npm install', 'for': 'rust'}
    Plug 'neoclide/coc-tsserver', {'do': 'npx yarn install', 'for': ['javascript', 'typescript']}
    Plug 'neoclide/coc-eslint', {'do': 'npm install', 'for': ['javascript', 'typescript']}
    Plug 'clangd/coc-clangd', {'do': 'npm install', 'for': ['c', 'cpp']}
endif
"Plug 'neoclide/coc-snippets', {'do': 'npm install'}
"Plug 'neoclide/coc-json', {'do': 'npm install'}
"Plug 'neoclide/coc-css', {'do': 'npm install'}
"Plug 'neoclide/coc-html', {'do': 'npm install'}

if executable("cargo")
    Plug 'wfxr/minimap.vim', {'do': ':!cargo install --locked code-minimap'}
endif

call plug#end()

"" COC
" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')
autocmd BufWrite *.c Format
autocmd BufWrite *.cpp Format

" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)
" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
"" COC end

let mapleader = " "

nmap <leader>c :make<CR>

" FZF 
map <leader>f :FZF<cr>
map <leader>b :Buffers<cr>

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-h> <C-W>h
map <C-k> <C-W>k
map <C-l> <C-W>l

" Fast saving
nmap <leader>w :w<cr>
" delete all buffers
nmap <leader>X :bufdo bd<cr>
" delete all buffers but current
nmap <leader>x :%bd\|e#\|bd# <cr> 

" Alt {a,d} can switch buffers
nnoremap <M-a> :bp<CR>
nnoremap <M-d> :bn<CR>

map <leader>e :e <c-r>=expand("%:p:h")<cr>/

" Move a line of text using ALT+[jk] or Command+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Tabbing out lines
vnoremap > >gv
vnoremap < <gv
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

map 0 ^

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

augroup filetypedetect
  " Mail
  autocmd BufRead,BufNewFile *mutt-*  setfiletype mail
augroup END

autocmd BufEnter * let &titlestring = expand("%:t")
set title

set termguicolors
set noshowmode
let g:lightline = { 'colorscheme': 'seoul256' }

let g:cargo_makeprg_params = 'build'

let g:gutentags_file_list_command = {
            \ 'markers': {
            \ '.git': 'git ls-files',
            \ '.hg': 'hg files',
            \ },
            \ }
let g:gutentags_cache_dir = expand('~/.cache/vim/gutentags')

let g:minimap_width = 30

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

set splitbelow splitright

set updatetime=300
set shortmess+=c
set signcolumn=auto

set list
" set listchars=tab:>-,trail:~,space:.

set foldmethod=syntax
set foldlevel=8

set number
set relativenumber

set clipboard+=unnamedplus

" Height of the command bar
set cmdheight=1
" A buffer becomes hidden when it is abandoned
set hidden

set whichwrap+=<,>,h,l

set ignorecase
set smartcase

set hlsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" No annoying sound on errors
set noerrorbells
set novisualbell

" Use Unix as the standard file type
set ffs=unix,dos,mac

set nobackup
set nowb
set noswapfile

set undodir=~/.local/share/vim/undo
set undofile

" tabs
set tabstop=8 softtabstop=0 expandtab shiftwidth=4

set textwidth=100
set colorcolumn=+1

set wrap

try
    colorscheme spacecamp
catch
endtry

set background=dark

highlight clear SignColumn
" make transparent bg work -- alacritty
highlight Normal ctermbg=NONE guibg=NONE 
highlight NonText ctermbg=NONE guibg=NONE
