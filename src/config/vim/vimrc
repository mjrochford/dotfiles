filetype off " required

source ~/.config/vim/autoload/*

call plug#begin('~/.config/vim/plugged')

Plug 'tpope/vim-fugitive'

Plug 'jaredgorski/spacecamp'
Plug 'editorconfig/editorconfig-vim'
Plug 'sheerun/vim-polyglot'
Plug 'rust-lang/rust.vim'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

Plug 'alvan/vim-closetag'
Plug 'junegunn/fzf', { 'dir': '~/.config/vim/fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'itchyny/lightline.vim'
Plug 'junegunn/limelight.vim'
" Plug 'wellle/context.vim'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
"Plug 'neoclide/coc-snippets', {'do': 'npm install'}
Plug 'neoclide/coc-tsserver', {'do': 'npx yarn install'}
"Plug 'neoclide/coc-json', {'do': 'npm install'}
"Plug 'neoclide/coc-css', {'do': 'npm install'}
"Plug 'neoclide/coc-html', {'do': 'npm install'}
Plug 'neoclide/coc-eslint', {'do': 'npm install'}
Plug 'clangd/coc-clangd', {'do': 'npm install'}
Plug 'fannheyward/coc-rust-analyzer', {'do': 'npm install'}

call plug#end() " required

autocmd!

let g:rustfmt_autosave = 1

" Always show the status line
set laststatus=2
set noshowmode
let g:lightline = { 'colorscheme': 'seoul256' }

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " "

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')
autocmd BufWrite *.c Format
autocmd BufWrite *.cpp Format

function! Compile()
    if filereadable("Makefile")
        make
    elseif filereadable("meson.build")
        execute "!meson compile -C build"
    else
        echo "not a project directory"
    endif
endfunction

nmap <leader>c :call Compile()<CR>

" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)
" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction


" FZF 
map <leader>f :FZF<cr>
map <leader>b :Buffers<cr>

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-h> <C-W>h
map <C-k> <C-W>k
map <C-l> <C-W>l

" Fast saving
nmap <leader>w :w<cr>
map <leader>X :bufdo bd<cr>

" Alt {a,d} can switch buffers
nnoremap <M-a> :bp<CR>
nnoremap <M-d> :bn<CR>

map <leader>e :e <c-r>=expand("%:p:h")<cr>/

" Move a line of text using ALT+[jk] or Command+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Tabbing out lines
vnoremap > >gv
vnoremap < <gv
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

map 0 ^

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

set splitbelow splitright

set updatetime=300
set shortmess+=c
set signcolumn=auto

set list
set listchars=tab:>-,trail:~,space:.

set foldmethod=syntax
set foldlevel=8

set number
set relativenumber

set clipboard+=unnamedplus

" Sets how many lines of history VIM has to remember
set history=500

" Set to auto read when a file is changed from the outside
set autoread

" Enable filetype plugins
filetype plugin on
filetype indent on

" Height of the command bar
set cmdheight=1
" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set ignorecase
set smartcase

set hlsearch
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" No annoying sound on errors
set noerrorbells
set novisualbell


" Use Unix as the standard file type
set ffs=unix,dos,mac

set nobackup
set nowb
set noswapfile

set undodir=~/.local/share/vim/undo
set undofile

" tabs
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab

set textwidth=100
set colorcolumn=+1

set autoindent
set wrap

syntax enable

try
    colorscheme spacecamp
catch
endtry

set background=dark
set encoding=utf8

highlight clear SignColumn
